
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000879  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000395  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  74:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <data>:
char rxr()
{
	while ((UCSRA&0X80)==0);
	UCSRA=0X80;
	return(UDR);
}
  7c:	85 bb       	out	0x15, r24	; 21
  7e:	80 ec       	ldi	r24, 0xC0	; 192
  80:	82 bb       	out	0x12, r24	; 18
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	80 e7       	ldi	r24, 0x70	; 112
  86:	92 e0       	ldi	r25, 0x02	; 2
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <data+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <data+0x16>
  92:	00 00       	nop
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	82 bb       	out	0x12, r24	; 18
  98:	08 95       	ret

0000009a <cmd>:
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <cmd+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <cmd+0x16>
  b0:	00 00       	nop
  b2:	12 ba       	out	0x12, r1	; 18
  b4:	08 95       	ret

000000b6 <txr>:
void txr(char b)
{
	UDR=b;
  b6:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&0X40)==0);
  b8:	5e 9b       	sbis	0x0b, 6	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <txr+0x2>
	UCSRA=0X40;
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	08 95       	ret

000000c2 <main>:
char a;
int x;

int main(void)
{
	DDRD=0XF2;
  c2:	82 ef       	ldi	r24, 0xF2	; 242
  c4:	81 bb       	out	0x11, r24	; 17
	UCSRA=0X00;
  c6:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0X18;
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
  cc:	86 e8       	ldi	r24, 0x86	; 134
  ce:	80 bd       	out	0x20, r24	; 32
	UBRRL=51;
  d0:	83 e3       	ldi	r24, 0x33	; 51
  d2:	89 b9       	out	0x09, r24	; 9
	
	DDRA=0X00;
  d4:	1a ba       	out	0x1a, r1	; 26
	DDRC=0XFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 bb       	out	0x14, r24	; 20
	
	ADCSRA=0X80;
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	86 b9       	out	0x06, r24	; 6
	ADMUX=0X40;
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	87 b9       	out	0x07, r24	; 7
	cmd(0X01);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 4d 00 	call	0x9a	; 0x9a <cmd>
	cmd(0X0E);
  e8:	8e e0       	ldi	r24, 0x0E	; 14
  ea:	0e 94 4d 00 	call	0x9a	; 0x9a <cmd>
	cmd(0X06);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 4d 00 	call	0x9a	; 0x9a <cmd>
	cmd(0X38);
  f4:	88 e3       	ldi	r24, 0x38	; 56
  f6:	0e 94 4d 00 	call	0x9a	; 0x9a <cmd>
	cmd(0X80);
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	0e 94 4d 00 	call	0x9a	; 0x9a <cmd>
	while (1)
	{
		
		ADCSRA=0XC0;
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA & 0X40)==0X40);
 104:	36 99       	sbic	0x06, 6	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x42>
		int a=ADCL;
 108:	84 b1       	in	r24, 0x04	; 4
		a+=ADCH<<8;
 10a:	c5 b1       	in	r28, 0x05	; 5
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	dc 2f       	mov	r29, r28
 110:	cc 27       	eor	r28, r28
 112:	c8 0f       	add	r28, r24
 114:	d1 1d       	adc	r29, r1
		
		int b=(a/1000);
 116:	ce 01       	movw	r24, r28
 118:	68 ee       	ldi	r22, 0xE8	; 232
 11a:	73 e0       	ldi	r23, 0x03	; 3
 11c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
 120:	6c 01       	movw	r12, r24
		data(b+48);
 122:	10 e3       	ldi	r17, 0x30	; 48
 124:	16 0f       	add	r17, r22
 126:	81 2f       	mov	r24, r17
 128:	0e 94 3e 00 	call	0x7c	; 0x7c <data>
		txr(b+48);
 12c:	81 2f       	mov	r24, r17
 12e:	0e 94 5b 00 	call	0xb6	; 0xb6 <txr>
		
		int c=(a%1000)/100;
 132:	0f 2e       	mov	r0, r31
 134:	f4 e6       	ldi	r31, 0x64	; 100
 136:	ef 2e       	mov	r14, r31
 138:	f1 2c       	mov	r15, r1
 13a:	f0 2d       	mov	r31, r0
 13c:	c6 01       	movw	r24, r12
 13e:	b7 01       	movw	r22, r14
 140:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
		data(c+48);
 144:	10 e3       	ldi	r17, 0x30	; 48
 146:	16 0f       	add	r17, r22
 148:	81 2f       	mov	r24, r17
 14a:	0e 94 3e 00 	call	0x7c	; 0x7c <data>
		txr(c+48);
 14e:	81 2f       	mov	r24, r17
 150:	0e 94 5b 00 	call	0xb6	; 0xb6 <txr>
	
		int d=(a%100)/10;
 154:	ce 01       	movw	r24, r28
 156:	b7 01       	movw	r22, r14
 158:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
 15c:	0f 2e       	mov	r0, r31
 15e:	fa e0       	ldi	r31, 0x0A	; 10
 160:	ef 2e       	mov	r14, r31
 162:	f1 2c       	mov	r15, r1
 164:	f0 2d       	mov	r31, r0
 166:	b7 01       	movw	r22, r14
 168:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
		data(d+48);
 16c:	10 e3       	ldi	r17, 0x30	; 48
 16e:	16 0f       	add	r17, r22
 170:	81 2f       	mov	r24, r17
 172:	0e 94 3e 00 	call	0x7c	; 0x7c <data>
		txr(d+48);
 176:	81 2f       	mov	r24, r17
 178:	0e 94 5b 00 	call	0xb6	; 0xb6 <txr>
		
		int e=(a%10);
 17c:	ce 01       	movw	r24, r28
 17e:	b7 01       	movw	r22, r14
 180:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
		data(e+48);
 184:	c0 e3       	ldi	r28, 0x30	; 48
 186:	c8 0f       	add	r28, r24
 188:	8c 2f       	mov	r24, r28
 18a:	0e 94 3e 00 	call	0x7c	; 0x7c <data>
		txr(e+48);
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 5b 00 	call	0xb6	; 0xb6 <txr>
		txr('\r');
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	0e 94 5b 00 	call	0xb6	; 0xb6 <txr>
		cmd(0X01);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 4d 00 	call	0x9a	; 0x9a <cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	80 e7       	ldi	r24, 0x70	; 112
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xe4>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xee>
 1b0:	00 00       	nop
 1b2:	a6 cf       	rjmp	.-180    	; 0x100 <main+0x3e>

000001b4 <__divmodhi4>:
 1b4:	97 fb       	bst	r25, 7
 1b6:	07 2e       	mov	r0, r23
 1b8:	16 f4       	brtc	.+4      	; 0x1be <__divmodhi4+0xa>
 1ba:	00 94       	com	r0
 1bc:	07 d0       	rcall	.+14     	; 0x1cc <__divmodhi4_neg1>
 1be:	77 fd       	sbrc	r23, 7
 1c0:	09 d0       	rcall	.+18     	; 0x1d4 <__divmodhi4_neg2>
 1c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__udivmodhi4>
 1c6:	07 fc       	sbrc	r0, 7
 1c8:	05 d0       	rcall	.+10     	; 0x1d4 <__divmodhi4_neg2>
 1ca:	3e f4       	brtc	.+14     	; 0x1da <__divmodhi4_exit>

000001cc <__divmodhi4_neg1>:
 1cc:	90 95       	com	r25
 1ce:	81 95       	neg	r24
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	08 95       	ret

000001d4 <__divmodhi4_neg2>:
 1d4:	70 95       	com	r23
 1d6:	61 95       	neg	r22
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255

000001da <__divmodhi4_exit>:
 1da:	08 95       	ret

000001dc <__udivmodhi4>:
 1dc:	aa 1b       	sub	r26, r26
 1de:	bb 1b       	sub	r27, r27
 1e0:	51 e1       	ldi	r21, 0x11	; 17
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <__udivmodhi4_ep>

000001e4 <__udivmodhi4_loop>:
 1e4:	aa 1f       	adc	r26, r26
 1e6:	bb 1f       	adc	r27, r27
 1e8:	a6 17       	cp	r26, r22
 1ea:	b7 07       	cpc	r27, r23
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <__udivmodhi4_ep>
 1ee:	a6 1b       	sub	r26, r22
 1f0:	b7 0b       	sbc	r27, r23

000001f2 <__udivmodhi4_ep>:
 1f2:	88 1f       	adc	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	5a 95       	dec	r21
 1f8:	a9 f7       	brne	.-22     	; 0x1e4 <__udivmodhi4_loop>
 1fa:	80 95       	com	r24
 1fc:	90 95       	com	r25
 1fe:	bc 01       	movw	r22, r24
 200:	cd 01       	movw	r24, r26
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
